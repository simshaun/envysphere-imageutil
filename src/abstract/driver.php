<?php
abstract class EnvImage_Abstract_Driver {

	/**
	 * Returns only the name portion of a filename, e.g.
	 *
	 *    $image->getFilename('foo.png')      // foo
	 *    $image->getFilename('bar.med.jpg')  // foo.med
	 *
	 * @param   string  $filename
	 * @return  string
	 */
	public function getFileName($filename)
	{
		return pathinfo($filename, PATHINFO_FILENAME);
	}

	/**
	 * Returns only the extension portion of a filename, e.g.
	 *
	 *    $image->getFilename('foo.png')      // png
	 *    $image->getFilename('foo.med.jpg')  // jpg
	 *
	 * @param   string  $filename
	 * @return  string
	 */
	public function getFileExtension($filename)
	{
		return strtolower( pathinfo($filename, PATHINFO_EXTENSION) );
	}

	/**
	 * Returns a formatted filename stripped of all special characters.
	 *
	 * @param   string  $filename
	 * @return  string
	 */
	public function sanitizeFilename($filename)
	{
		$filename = strtolower( $filename );

		// Convert multiple spaces into a single space.
		$filename = preg_replace( '/\s+/', ' ', $filename );

		// Convert single spaces into underscores.
		$filename = str_replace( ' ', '_', $filename );

		// Replace "different" characters with an underscore.
		$filename = preg_replace( '/[^.0-9A-Z()_-]/i', '_', $filename );

		// Convert multiple underscores into a single underscore.
		$filename = preg_replace( '/_+/', '_', $filename );

		return $filename;
	}

	/**
	 * Converts a hex code to RGB.
	 *
	 * @param   hex|string
	 * @return  array
	 */
	public function hex2rgb($hex)
	{
		if (is_numeric($hex))
		{
			$hex = dechex($hex);
		}
		else if (strlen($hex) == 3)
		{
			$str = str_split($hex);
			$hex = '';

			foreach ($str AS $char)
			{
				$hex .= $char . $char;
			}
		}

		$rgb['r'] = hexdec( substr($hex, 0, 2) );
		$rgb['g'] = hexdec( substr($hex, 2, 2) );
		$rgb['b'] = hexdec( substr($hex, 4, 2) );

		return $rgb;
	}

	/**
	 * @param   string  $filename
	 * @return  EnvImage_Abstract_Driver
	 */
	abstract public function loadFromFile($filename);

	/**
	 * Outputs the image as a string.
	 *
	 * @param   int  $quality  JPG: 0-100, PNG: 0-9
	 * @return  string
	 */
	abstract public function output($quality = 100);

	/**
	 * Saves the image to a file. Does not output.
	 *
	 * If $filename is empty, the original filename will be used.
	 * If the original filename is empty (e.g. if the source came from a string),
	 * a filename will be automatically generated.
	 *
	 * @param   string  $directory  Path to directory where image will be saved.
	 * @param   string  $filename   Filename that image will be saved as.
	 * @param   bool|string  $sanitize  If not FALSE, will be used as a callback for sanitizing filename.
	 * @param   int     $quality    JPG: 0-100, PNG: 0-9
	 * @return  string  The full path the image was saved to.
	 */
	abstract public function save($directory, $filename = NULL, $sanitize = TRUE, $quality = 100);

	/**
	 * Resizes the image, if necessary. If the image's dimensions are smaller than the
	 * dimensions passed as arguments to this method, no resize is performed.
	 *
	 * @param   int       $max_width
	 * @param   null|int  $max_height       If null, $height set to $width.
	 * @param   bool      $crop             Crop to ensure output is exactly $width and $height.
	 * @param   string    $crop_direction  (t, b, l, r, c) If $crop, which direction to crop the image towards.
	 * @return  EnvImage_Abstract_Driver
	 */
	abstract public function resize($max_width = 0, $max_height = 0, $crop = FALSE, $crop_direction = 'c');

	/**
	 * Crops the image, from ($x, $y) to ($x + $width, $y + $height).
	 *
	 *    $image->crop(0, 0, 200, 200);
	 *
	 * @param   $x
	 * @param   $y
	 * @param   $width
	 * @param   $height
	 * @return  EnvImage_Abstract_Driver
	 */
	abstract public function crop($x, $y, $width, $height);

	/**
	 * Rotates an image by the number of degrees specified.
	 *
	 *    $image->rotate(25, 0xFFFFFF);
	 *
	 * @param  int  -360 to 360
	 * @param  int  Background color of the area generated by the rotate function
	 * @return  EnvImage_Abstract_Driver
	 */
	abstract public function rotate($angle, $bg_color = 0x000000);

}